@page "/"
@page "/login"
@using Farm.Models
@using System.Text
@using MudBlazor
@inject ISnackbar Snackbar
@layout AuthanticationLayout


<section class="vh-100">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                <div class="card shadow-2-strong" style="border-radius: 1rem;">
                    <div class="card-body p-5">

                        <h3 class="mb-5">Sign in</h3>

                        <EditForm Model="@user" OnValidSubmit="@Submit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <div class="form-group">
                                <label>EMAIL</label>
                                <InputText class="form-control" @bind-Value="@user.Username" id="Username" />
                            </div>
                            <div class="form-group">
                                <label for="Name">PASSWORD</label>
                                <RadzenPassword class="form-control" @bind-Value="@user.Password" id="Password" />
                            </div>
                            <div class="form-group">
                                <input type="submit" class="btn-sm btn-primary  form-control" value="LOGIN" />
                               @* <div style="display:@loading" aria-valuemax="100" aria-valuemin="0" role="progressbar" class="rz-progressbar rz-progressbar-indeterminate rz-progressbar-indeterminate-primary" aria-valuenow="100" id="vqdp6SVaZk">
                                    <div class="rz-progressbar-value rz-progressbar-value-animate" style="width: 100%;">
                                    </div>
                                </div>*@
                            </div>
                        </EditForm>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogContent>
            <MatProgressCircle Indeterminate="true" FourColored="true" />
                <p>loading....</p>
            </MatDialogContent>
        </MatDialog>


</section>

@code {

    private bool dialogIsOpen = false;
    UserLogin user = new UserLogin();
    string error;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        user.Password = "THIma$!305";
        user.Username = "thimakulani@gmail.com";
    }
    private async void Submit()
    {
        var json = Newtonsoft.Json.JsonConvert.SerializeObject(user);
        HttpContent data = new StringContent(json, Encoding.UTF8, "application/json");
        HttpClient httpClient = new HttpClient();


        try
        {
            dialogIsOpen = true;
            var results = await httpClient.PostAsync("https://farm-web-api.herokuapp.com/api/Account/login", data);
            if (results.IsSuccessStatusCode)
            {
                string str_out = await results.Content.ReadAsStringAsync();
                AuthRespnse authRespnse = new AuthRespnse();
                authRespnse = Newtonsoft.Json.JsonConvert.DeserializeObject<AuthRespnse>(str_out);
                Preferences.Set("token", authRespnse.Token);
                Preferences.Set("id", authRespnse.ApplicationUser.Id);
                NavigationManager.NavigateTo("index");
                dialogIsOpen = false;
            }
            else
            {
                if (results.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    error = await results.Content.ReadAsStringAsync();
                    Snackbar.Add(error, Severity.Error);
                }
                else
                {
                    error = await results.Content.ReadAsStringAsync();
                    Snackbar.Add(error, Severity.Error);
                }
                Snackbar.Add(error, Severity.Error);
                StateHasChanged();
                dialogIsOpen = false;
            }
        }
        catch (HttpRequestException ex)
        {
            error = ex.Message;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

}
