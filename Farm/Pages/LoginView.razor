@page "/"
@page "/login"
@using Farm.Models
@using System.Text
@using MudBlazor
@inject ISnackbar Snackbar
@layout AuthanticationLayout


<div class="hold-transition login-page">

    <div class="login-box">
        <!-- /.login-logo -->
        <div class="card">
            <div class="card-body login-card-body">
                <p class="login-box-msg">Sign in to start your session</p>
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <EditForm Model="@user" OnValidSubmit="@Submit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-group mb-3">
                         <InputText class="form-control" @bind-Value="@user.Username" id="Username" />
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-envelope"></span>
                            </div>
                        </div>
                    </div>
                    <div class="input-group mb-3">
                         <RadzenPassword class="form-control" @bind-Value="@user.Password" id="Password" />
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-lock"></span>
                            </div>
                        </div>
                    </div>
                    <!-- /.col -->
                    <input type="submit" class="btn-sm btn-primary  form-control" value="LOGIN" />
                    <!-- /.col -->
                </EditForm>
                <!-- /.social-auth-links -->
                <p class="mb-1">
                    <a asp-action="ResertPassword">I forgot my password</a>
                </p>
                <p class="mb-0">
                    @*<a href="register.html" class="text-center">Register a new membership</a>*@
                </p>
            </div>
            <!-- /.login-card-body -->
        </div>
    </div>
</div>
    <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogContent>
                <div class="form-inline"> 
                    <MatProgressCircle Indeterminate="true" FourColored="true" />
                    <p>loading....</p>
                </div>
            </MatDialogContent>
        </MatDialog>




@code {

    private bool dialogIsOpen = false;
    UserLogin user = new UserLogin();
    string error;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        user.Password = "THIma$!305";
        user.Username = "thimakulani@gmail.com";
    }
    private async void Submit()
    {
        var json = Newtonsoft.Json.JsonConvert.SerializeObject(user);
        HttpContent data = new StringContent(json, Encoding.UTF8, "application/json");
        HttpClient httpClient = new HttpClient();


        try
        {
            dialogIsOpen = true;
            var results = await httpClient.PostAsync("https://farm-web-api.herokuapp.com/api/Account/login", data);
            if (results.IsSuccessStatusCode)
            {
                string str_out = await results.Content.ReadAsStringAsync();
                AuthRespnse authRespnse = new AuthRespnse();
                authRespnse = Newtonsoft.Json.JsonConvert.DeserializeObject<AuthRespnse>(str_out);
                Preferences.Set("token", authRespnse.Token);
                Preferences.Set("id", authRespnse.ApplicationUser.Id);
                NavigationManager.NavigateTo("index");
                dialogIsOpen = false;
            }
            else
            {
                if (results.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    error = await results.Content.ReadAsStringAsync();
                    Snackbar.Add(error, Severity.Error);
                }
                else
                {
                    error = await results.Content.ReadAsStringAsync();
                    Snackbar.Add(error, Severity.Error);
                }
                Snackbar.Add(error, Severity.Error);
                StateHasChanged();
                dialogIsOpen = false;
            }
        }
        catch (HttpRequestException ex)
        {
            error = ex.Message;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

}
